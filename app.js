window.addEventListener("load", () => {
  const CONTRACT_ADDRESS = "0x961d3F83FC8Da943071EA329D628249cA25F5B05";
  const ABI = [
    "function register(string handle)",
    "function sendTip(address to) payable",
    "function getMyHandle() view returns (string)",
    "function getReceivedTips(address user) view returns (uint256)",
    "function users(address) view returns (string twitterHandle, bool registered)"
  ];

  let signer;
  let provider;

  // ‚úÖ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç ‚Äî Magic.default
  const magic = new window.Magic.default("pk_live_CBB4E24015C02A64", {
    oauthOptions: { providers: ["twitter"] }
  });

  document.getElementById("connect").onclick = async () => {
    if (!window.ethereum) {
      alert("–£—Å—Ç–∞–Ω–æ–≤–∏ MetaMask");
      return;
    }

    try {
      provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      signer = provider.getSigner();

      const network = await provider.getNetwork();
      if (network.chainId !== 84532) {
        alert("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–µ—Ç—å Base Sepolia –≤ MetaMask");
        return;
      }

      const address = await signer.getAddress();
      document.getElementById("wallet").innerText = "–ö–æ—à–µ–ª—ë–∫: " + address;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MetaMask");
    }
  };

  document.getElementById("login").onclick = async () => {
    try {
      const result = await magic.oauth.loginWithPopup({ provider: "twitter" });

      console.log("Twitter login result:", result);

      const twitterHandle = result.oauth.userInfo.raw.user.screen_name;
      document.getElementById("handle").innerText = "Twitter: @" + twitterHandle;

      if (!signer) {
        provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        signer = provider.getSigner();
      }

      const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);
      const tx = await contract.register("@" + twitterHandle);
      await tx.wait();

      alert("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ @" + twitterHandle);
    } catch (err) {
      console.error("Twitter login failed:", err);
      alert("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Twitter: " + (err?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
    }
  };

  document.getElementById("tip").onclick = async () => {
    const recipient = document.getElementById("recipient").value.trim();
    const amount = document.getElementById("amount").value.trim();

    if (!signer) {
      alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª—ë–∫");
      return;
    }

    if (!ethers.utils.isAddress(recipient)) {
      alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
      return;
    }

    if (!amount || isNaN(amount) || Number(amount) <= 0) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ ETH");
      return;
    }

    try {
      const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);
      const user = await contract.users(recipient);

      if (!user.registered) {
        alert("‚õî –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ Tip Jar");
        return;
      }

      const tx = await contract.sendTip(recipient, {
        value: ethers.utils.parseEther(amount)
      });

      alert("üí∏ –ß–∞–µ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\nTX: " + tx.hash);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–µ–≤—ã—Ö:", err);
      alert("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + (err?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
    }
  };
});
